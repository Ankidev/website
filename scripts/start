#!/usr/bin/env node

/*
Discord Extreme List - Discord's unbiased list.

Copyright (C) 2020 Cairo Mitchell-Acason, John Burke, Advaith Jagathesan

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * Module dependencies.
 */

const app = require("../app");
const settings = require("../settings.json");
const debug = require("debug")("del-v5:server");
const fs = require("fs");
const { exec } = require("child_process");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(settings.website.port.value || process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTPS server.
 */

// const options = {
//   key: fs.readFileSync(`${process.cwd()}/ssl/server.key`),
//   cert: fs.readFileSync(`${process.cwd()}/ssl/server.pem`)
// };

// const https = require("https");
// const server = https.createServer(app);

/**
 * Create HTTP server.
 */

const http = require("http");
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

async function listen() {
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}
listen();
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

async function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      if (settings.website.port.agressive === false) {
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      } else {
        exec(`fuser -k ${port}/tcp`).addListener("exit", () => {
          console.error(bind + " is already in use, but I have killed the process using it for you.");
          listen();
        });
        break;
      }
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
